AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Smart Farming Advisory System v1

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  S3BucketName:
    Type: String
    Default: smart-farming-assets
    Description: S3 bucket name for storing static assets
  DynamoTableName:
    Type: String
    Default: SmartFarmingUsers
    Description: DynamoDB table name for user data

Resources:
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}-${Environment}'
      VersioningConfiguration:
        Status: Enabled

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${DynamoTableName}-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SmartFarmingLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt UsersTable.Arn

  ExampleLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ExampleFunction-${Environment}'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Hello from lambda'})
              }

      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'SmartFarmingAPI-${Environment}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins:
          - '*'

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      Description: Integration for Lambda function
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ExampleLambda}
      PayloadFormatVersion: '2.0'

  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /hello'
      Target: !Sub integrations/${ApiIntegration}

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: true

Outputs:
  AssetsBucketName:
    Description: Name of the S3 bucket for storing assets
    Value: !Ref AssetsBucket
  UsersTableName:
    Description: DynamoDB table name
    Value: !Ref UsersTable
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref ExampleLambda
  ApiUrl:
    Description: URL of the API Gateway endpoint
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
